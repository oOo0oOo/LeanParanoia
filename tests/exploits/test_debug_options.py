"""
Tests for dangerous debug option detection.

These options can bypass kernel verification or replace proofs with sorry.
All are caught by existing LeanParanoia checks:
- EnvironmentReplay catches debug.skipKernelTC
- NoSorry catches debug.proofAsSorry, debug.byAsSorry, debug.terminalTacticsAsSorry
"""

import pytest


@pytest.mark.exploit
def test_skip_kernel_tc_documented(verifier):
    """debug.skipKernelTC would bypass kernel if set in lakefile, but
    setting it via set_option in source code doesn't help because elaboration
    happens first. This test uses an axiom to represent the exploit."""
    result = verifier.verify_theorem(
        "LeanTestProject.CustomAxioms.SkipKernelTC",
        "exploit_theorem",
    )

    assert not result.success
    # Caught by AxiomWhitelist (we use axiom since set_option doesn't help)
    assert "CustomAxioms" in result.failed_tests


@pytest.mark.exploit
def test_proof_as_sorry_rejected(verifier):
    """debug.proofAsSorry replaces proofs with sorry - caught by NoSorry."""
    result = verifier.verify_theorem(
        "LeanTestProject.Sorry.ProofAsSorry",
        "exploit_theorem",
    )

    assert not result.success
    assert "Sorry" in result.failed_tests


@pytest.mark.exploit
def test_by_as_sorry_rejected(verifier):
    """debug.byAsSorry replaces tactic blocks with sorry - caught by NoSorry."""
    result = verifier.verify_theorem(
        "LeanTestProject.Sorry.ByAsSorry",
        "exploit_theorem",
    )

    assert not result.success
    assert "Sorry" in result.failed_tests


@pytest.mark.exploit
def test_terminal_tactics_as_sorry_rejected(verifier):
    """debug.terminalTacticsAsSorry replaces terminal tactics with sorry - caught by NoSorry."""
    result = verifier.verify_theorem(
        "LeanTestProject.Sorry.TerminalTactics",
        "exploit_theorem",
    )

    assert not result.success
    assert "Sorry" in result.failed_tests


@pytest.mark.exploit
def test_unsafe_reducibility_allowed(verifier):
    """allowUnsafeReducibility allows unsafe modifications but doesn't affect soundness."""
    result = verifier.verify_theorem(
        "LeanTestProject.Valid.UnsafeReducibility",
        "exploit_theorem",
    )

    # This should actually pass - it's a valid proof, just uses an option
    # that allows potentially confusing reducibility changes
    assert result.success
