"""Regression tests for extern/FFI/foreign code attributes."""

import pytest


@pytest.mark.exploit
def test_export_attribute_rejected(verifier, default_config):
    """Declarations exported to the C ABI should be treated like externs."""
    result = verifier.verify_theorem(
        "LeanTestProject.Extern.Export",
        "exploit_theorem",
        config=dict(default_config),
    )

    assert not result.success
    assert "NoExtern" in result.failed_tests


@pytest.mark.exploit
def test_init_attribute_rejected(verifier, default_config):
    """` @[init]` should be rejected like other foreign hooks."""
    result = verifier.verify_theorem(
        "LeanTestProject.Extern.InitAttr",
        "exploit_theorem",
        config=dict(default_config),
    )

    assert not result.success
    assert "NoExtern" in result.failed_tests


@pytest.mark.exploit
def test_builtin_init_attribute_rejected(verifier, default_config):
    """` @[builtin_init]` should be rejected like other foreign hooks."""
    result = verifier.verify_theorem(
        "LeanTestProject.Extern.BuiltinInitAttr",
        "exploit_theorem",
        config=dict(default_config),
    )

    assert not result.success
    assert "NoExtern" in result.failed_tests


@pytest.mark.exploit
def test_extern_attribute_rejected(verifier, default_config):
    """`@[extern]` should be rejected."""
    result = verifier.verify_theorem(
        "LeanTestProject.Extern.Extern",
        "exploit_theorem",
        config=dict(default_config),
    )

    assert not result.success
    assert "NoExtern" in result.failed_tests


@pytest.mark.exploit
def test_implemented_by_rejected(verifier, default_config):
    """`@[implemented_by]` should be rejected."""
    result = verifier.verify_theorem(
        "LeanTestProject.Extern.ImplementedBy",
        "exploit_theorem",
        config=dict(default_config),
    )

    assert not result.success
    assert "NoImplementedBy" in result.failed_tests


@pytest.mark.exploit
def test_multi_hop_implemented_by_chain_rejected(verifier, default_config):
    """implemented_by chains that end in private externs should be rejected."""
    result = verifier.verify_theorem(
        "LeanTestProject.Extern.TransitiveChain",
        "exploit_theorem",
        config=dict(default_config),
    )

    assert not result.success
    assert "NoImplementedBy" in result.failed_tests


@pytest.mark.exploit
def test_core_mask_extern_rejected(verifier, default_config):
    """Extern attributes in Lean.* namespaces should still be caught (tests multiple namespaces)."""
    result = verifier.verify_theorem(
        "LeanTestProject.Extern.CoreMaskExtern",
        "exploit_theorem",
        config=dict(default_config),
    )

    assert not result.success
    assert "NoExtern" in result.failed_tests


@pytest.mark.exploit
def test_private_extern_rejected(verifier, default_config):
    """Private declarations with extern attributes should still be caught."""
    result = verifier.verify_theorem(
        "LeanTestProject.Extern.PrivateExtern",
        "exploit_theorem",
        config=dict(default_config),
    )

    assert not result.success
    assert "NoExtern" in result.failed_tests


@pytest.mark.exploit
def test_private_implemented_by_rejected(verifier, default_config):
    """Private declarations with implemented_by should still be caught."""
    result = verifier.verify_theorem(
        "LeanTestProject.Extern.PrivateImplementedBy",
        "exploit_theorem",
        config=dict(default_config),
    )

    assert not result.success
    assert "NoImplementedBy" in result.failed_tests
