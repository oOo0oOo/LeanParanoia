"""
Tests for metavariable exploit detection.
"""

import pytest


@pytest.mark.exploit
@pytest.mark.parametrize(
    "module,theorem",
    [
        ("LeanTestProject.Metavariables.FailedSearch", "exploit_theorem"),
        ("LeanTestProject.Metavariables.Timeout", "exploit_theorem"),
    ],
)
def test_metavariable_variants(verifier, module, theorem):
    """Test that incomplete proofs with holes are detected"""
    result = verifier.verify_theorem(module, theorem)

    # Holes (_) in proofs become sorry during elaboration
    # These realistic examples show incomplete proofs that should be caught
    assert not result.success, (
        f"Should reject {module} (contains holes/incomplete proofs)"
    )
    assert "NoSorry" in result.failed_tests
