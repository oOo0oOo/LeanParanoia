"""Test EnvironmentReplay catches corrupted .olean files."""

import pytest
import shutil
from pathlib import Path


@pytest.mark.exploit
def test_replay_catches_corrupted_olean(verifier):
    """EnvironmentReplay detects corrupted .olean files (supply chain attack)."""

    olean = Path(".pytest_cache/LeanTestProject/.lake/build/lib/lean/LeanTestProject/Valid/Helper.olean")
    backup = olean.with_suffix('.olean.bak')

    # First verify it works with uncorrupted file
    result_clean = verifier.verify_theorem(
        "LeanTestProject.Valid.Dependencies",
        "uses_helper",
        enable_replay=True,
        check_axioms=False,
    )
    assert result_clean.success

    shutil.copy(olean, backup)

    try:
        data = bytearray(olean.read_bytes())
        # Corrupt the beginning instead of middle - more likely to break parsing
        data[100:116] = b'\xFF' * 16
        olean.write_bytes(data)

        result = verifier.verify_theorem(
            "LeanTestProject.Valid.Dependencies",
            "uses_helper",
            enable_replay=True,
            check_axioms=False,
        )

        # Corrupted olean should cause verification to fail
        # Either through failed tests or by crashing (success=False with no details)
        assert not result.success, f"Expected failure but got success"

    finally:
        shutil.move(backup, olean)
