"""
Tests for sorry exploit detection.
"""

import pytest


@pytest.mark.exploit
@pytest.mark.parametrize(
    "module,theorem",
    [
        ("LeanTestProject.Sorry.Direct", "exploit_theorem"),
        ("LeanTestProject.Sorry.Admit", "exploit_theorem"),
        ("LeanTestProject.Sorry.Underscore", "exploit_theorem"),
        ("LeanTestProject.Sorry.Intermediate", "exploit_theorem"),
    ],
)
def test_sorry_variants(verifier, module, theorem):
    """Test all sorry exploit variants are detected"""
    result = verifier.verify_theorem(module, theorem)

    assert not result.success, f"Should reject {module}"
    assert "Sorry" in result.failed_tests


@pytest.mark.exploit
def test_sorry_single_failure_recorded(verifier):
    """Ensure sorry detection only reports one failure per offending theorem"""
    result = verifier.verify_theorem("LeanTestProject.Sorry.Direct", "exploit_theorem")

    assert result.failed_tests.count("Sorry") == 1


@pytest.mark.exploit
def test_sorry_transitive_level1(verifier):
    """Test detection of sorry in direct dependency"""
    result = verifier.verify_theorem(
        "LeanTestProject.Transitive.DeepSorry_L1", "uses_sorry_from_l0"
    )

    assert not result.success
    assert "Sorry" in result.failed_tests


@pytest.mark.exploit
def test_sorry_transitive_level2(verifier):
    """Test detection of sorry 2 levels deep"""
    result = verifier.verify_theorem(
        "LeanTestProject.Transitive.DeepSorry_L2", "uses_sorry_transitively"
    )

    assert not result.success
    assert "Sorry" in result.failed_tests
