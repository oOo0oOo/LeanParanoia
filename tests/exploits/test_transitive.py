"""Tests for transitive dependency detection."""

import pytest


@pytest.mark.exploit
def test_deep_axiom_transitively_detected(verifier):
    """Custom axioms should be detected through dependencies."""
    result = verifier.verify_theorem(
        "LeanTestProject.Transitive.DeepAxiom_L1", "uses_custom_axiom"
    )

    assert not result.success
    assert "CustomAxioms" in result.failed_tests


@pytest.mark.exploit
def test_deep_sorry_transitively_detected(verifier):
    """Sorry in dependencies should be detected transitively."""
    result = verifier.verify_theorem(
        "LeanTestProject.Transitive.DeepSorry_L2", "uses_sorry_transitively"
    )

    assert not result.success
    assert "Sorry" in result.failed_tests


@pytest.mark.exploit
def test_bad_external_dependency(verifier):
    """Test that exploits in external dependencies are detected."""
    result = verifier.verify_theorem(
        "LeanTestProject.Transitive.UsesBadLib", "exploit_theorem"
    )

    # Should fail because BadLib contains a malicious axiom
    assert not result.success
    assert "CustomAxioms" in result.failed_tests


def test_clean_dependencies_pass(verifier):
    """Clean multi-level dependencies should pass verification."""
    result = verifier.verify_theorem(
        "LeanTestProject.Transitive.Level2_UsesBoth", "uses_both"
    )

    assert result.success
